package lab11.graphs;
import edu.princeton.cs.algs4.MinPQ;
import java.util.Comparator;
/**
 *  @author Josh Hug
 */
public class MazeAStarPath extends MazeExplorer {
    private int s;
    private int t;
    private boolean targetFound = false;
    private Maze maze;
    private MinPQ<Integer> pq;
    private Comparator<Integer> cmp;

    public MazeAStarPath(Maze m, int sourceX, int sourceY, int targetX, int targetY) {
        super(m);
        maze = m;
        s = maze.xyTo1D(sourceX, sourceY);
        t = maze.xyTo1D(targetX, targetY);
        distTo[s] = 0;
        edgeTo[s] = s;
        cmp = (o1, o2) -> Integer.compare(h(o1) + distTo[o1], h(o2) + distTo[o2]); // 设置比较器以决定在pq中的顺序
        pq = new MinPQ<>(cmp);
    }

    /** Estimate of the distance from v to the target. Math.abs(sourceX - targetX) + Math.abs(sourceY - targetY);*/
    private int h(int v) {
        int sourceX = maze.toX(v);
        int sourceY = maze.toY(v);
        int targetX = maze.toX(t);
        int targetY = maze.toY(t);
        return Math.abs(sourceX - targetX) + Math.abs(sourceY - targetY);
    }

    /** Finds vertex estimated to be closest to target. */
    private int findMinimumUnmarked() {
        return pq.delMin();
        /* You do not have to use this method. */
    }

    /** Performs an A star search from vertex s. */
    private void astar(int s) {
        // A star算法步骤：
        // 将初始顶点插入pq并标记
        // 弹出当前队列顶点v，比较所有邻近顶点w，为d(source,v) + h(v,goal)的顺序储存在pq中
        // 重复弹出并标记
        pq.insert(s);
        marked[s] = true;
        while (!pq.isEmpty()){
            int v = findMinimumUnmarked();
            for (int w : maze.adj(v)){
                if (!marked[w]){
                    marked[w] = true;
                    edgeTo[w] = v;
                    distTo[w] = distTo[v] + 1; // distTo数组和h数组是分开的，h数组只在比较的时候拿出来用
                    announce();
                    if (w == t){
                        return;
                    }else {
                        pq.insert(w);
                    }
                }
            }
        }
    }

    @Override
    public void solve() {
        astar(s);
    }

}

